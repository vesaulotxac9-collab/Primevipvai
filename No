pcall(function()
-- ===========================
-- GAZE HUB — FULL COMPLETED
-- ===========================

-- R15 check
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then return end
if not LocalPlayer.Character or LocalPlayer.Character:WaitForChild("Humanoid").RigType ~= Enum.HumanoidRigType.R15 then
    game.StarterGui:SetCore("SendNotification", {Title = "R6", Text = "You're on R6, bro. Change to R15!", Duration = 60})
    return
end

local st = os.clock()
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
cloneref = cloneref or function(o) return o end
local CoreGui = cloneref(game:GetService("CoreGui")) or game:GetService("CoreGui")
local GazeGoGui = CoreGui or LocalPlayer:WaitForChild("PlayerGui")

-- ===========================
-- Notify helper
-- ===========================
local Notifbro = {}
local function Notify(titletxt, text, time)
    coroutine.wrap(function()
        local GUI = Instance.new("ScreenGui")
        local Main = Instance.new("Frame", GUI)
        local title = Instance.new("TextLabel", Main)
        local message = Instance.new("TextLabel", Main)

        GUI.Name = "BackgroundNotif"
        GUI.Parent = GazeGoGui

        local sw = workspace.CurrentCamera.ViewportSize.X
        local sh = workspace.CurrentCamera.ViewportSize.Y
        local nh = sh / 7
        local nw = sw / 5

        Main.Name = "MainFrame"
        Main.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Main.BackgroundTransparency = 0.15
        Main.BorderSizePixel = 0
        Main.Size = UDim2.new(0, nw, 0, nh)
        Main.AnchorPoint = Vector2.new(0,0)

        title.BackgroundColor3 = Color3.new(0, 0, 0)
        title.BackgroundTransparency = 0.9
        title.Size = UDim2.new(1, 0, 0, nh / 2)
        title.Font = Enum.Font.GothamBold
        title.Text = titletxt
        title.TextColor3 = Color3.new(1, 1, 1)
        title.TextScaled = true

        message.BackgroundColor3 = Color3.new(0, 0, 0)
        message.BackgroundTransparency = 1
        message.Position = UDim2.new(0, 0, 0, nh / 2)
        message.Size = UDim2.new(1, 0, 1, -nh / 2)
        message.Font = Enum.Font.Gotham
        message.Text = text
        message.TextColor3 = Color3.new(1, 1, 1)
        message.TextScaled = true

        local offset = 50
        for _, notif in ipairs(Notifbro) do
            offset = offset + notif.Size.Y.Offset + 10
        end

        Main.Position = UDim2.new(1, 5, 0, offset)
        table.insert(Notifbro, Main)

        task.wait(0.1)
        Main:TweenPosition(UDim2.new(1, -nw, 0, offset), Enum.EasingDirection.Out, Enum.EasingStyle.Bounce, 0.5, true)
        Main:TweenSize(UDim2.new(0, nw * 1.06, 0, nh * 1.06), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.5, true)
        task.wait(0.1)
        Main:TweenSize(UDim2.new(0, nw, 0, nh), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.2, true)

        task.wait(time)

        Main:TweenSize(UDim2.new(0, nw * 1.06, 0, nh * 1.06), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.2, true)
        task.wait(0.2)
        Main:TweenSize(UDim2.new(0, nw, 0, nh), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.2, true)
        task.wait(0.2)
        Main:TweenPosition(UDim2.new(1, 5, 0, offset), Enum.EasingDirection.In, Enum.EasingStyle.Bounce, 0.5, true)
        task.wait(0.1)

        GUI:Destroy()
        for i, notif in ipairs(Notifbro) do
            if notif == Main then
                table.remove(Notifbro, i)
                break
            end
        end

        for i, notif in ipairs(Notifbro) do
            local newOffset = 50 + (nh + 10) * (i - 1)
            notif:TweenPosition(UDim2.new(1, -nw, 0, newOffset), Enum.EasingDirection.Out, Enum.EasingStyle.Bounce, 0.5, true)
        end
    end)()
end

task.wait(0.1)

-- Prevent duplicate
local guiName = "GazeVerificator"
if GazeGoGui:FindFirstChild(guiName) then
    Notify("Error", "Script Already Executed", 1)
    return
end

-- Base ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = guiName
screenGui.ResetOnSpawn = false
screenGui.Parent = GazeGoGui

-- helper for viewport scaled sizes
local camera = workspace.CurrentCamera
local function getScaledSize(relativeWidth, relativeHeight)
    local viewportSize = camera.ViewportSize
    return UDim2.new(0, math.floor(viewportSize.X * relativeWidth), 0, math.floor(viewportSize.Y * relativeHeight))
end

-- Main draggable container (frame)
local rootGui = Instance.new("ScreenGui")
rootGui.Name = "GazeRootGui"
rootGui.ResetOnSpawn = false
rootGui.Parent = CoreGui

local frame = Instance.new("Frame")
frame.Name = "GazeBro"
frame.Size = getScaledSize(0.33, 0.45)
frame.Position = UDim2.new(0.5, -getScaledSize(0.33,0).X.Offset/2, 0.5, -getScaledSize(0,0.45).Y.Offset/2)
frame.AnchorPoint = Vector2.new(0,0)
frame.BackgroundColor3 = Color3.fromRGB(35,35,35)
frame.BackgroundTransparency = 0
frame.BorderSizePixel = 0
frame.Parent = rootGui
frame.Active = true
frame.Draggable = true

-- rounded corners for whole menu
local frameCorner = Instance.new("UICorner", frame)
frameCorner.CornerRadius = UDim.new(0, 12)

-- border frame to show RGB animated border
local border = Instance.new("Frame")
border.Name = "RGBBorder"
border.Size = UDim2.new(1, 6, 1, 6) -- slightly larger to form border
border.Position = UDim2.new(0, -3, 0, -3)
border.BackgroundTransparency = 1
border.Parent = frame
border.ZIndex = frame.ZIndex - 1

local borderStroke = Instance.new("UIStroke", border) -- UIStroke used to draw border with smooth edges
borderStroke.LineJoinMode = Enum.LineJoinMode.Round
borderStroke.Thickness = 3
borderStroke.Transparency = 0
borderStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
borderStroke.Color = Color3.fromRGB(0,170,255)

local borderCorner = Instance.new("UICorner", border)
borderCorner.CornerRadius = UDim.new(0, 16)

-- Title header (PrimeVip) inside frame, above searchbar
local header = Instance.new("Frame")
header.Name = "Header"
header.Size = UDim2.new(1, 0, 0, 36)
header.Position = UDim2.new(0, 0, 0, 6)
header.BackgroundTransparency = 1
header.Parent = frame
header.ZIndex = frame.ZIndex + 1

local primeBadge = Instance.new("Frame")
primeBadge.Name = "PrimeBadge"
primeBadge.Size = UDim2.new(0, 150, 0, 28)
primeBadge.Position = UDim2.new(0, 12, 0, 4)
primeBadge.BackgroundTransparency = 0
primeBadge.BackgroundColor3 = Color3.fromRGB(20,20,20)
primeBadge.Parent = header
primeBadge.ZIndex = header.ZIndex + 1
primeBadge.ClipsDescendants = true

local primeCorner = Instance.new("UICorner", primeBadge)
primeCorner.CornerRadius = UDim.new(0, 8)

local primeLabel = Instance.new("TextLabel", primeBadge)
primeLabel.Size = UDim2.new(1, -6, 1, 0)
primeLabel.Position = UDim2.new(0, 6, 0, 0)
primeLabel.BackgroundTransparency = 1
primeLabel.Font = Enum.Font.GothamBold
primeLabel.Text = "PrimeVip"
primeLabel.TextScaled = true
primeLabel.TextColor3 = Color3.fromRGB(255, 215, 0)
primeLabel.ZIndex = primeBadge.ZIndex + 1

-- subtle glow using UIStroke around primeLabel
local primeGlow = Instance.new("UIStroke", primeBadge)
primeGlow.Thickness = 1
primeGlow.Transparency = 0.5
primeGlow.Color = primeLabel.TextColor3

-- Search bar (positioned below header so no overlap)
local searchBar = Instance.new("TextBox", frame)
searchBar.Name = "SearchBar"
searchBar.PlaceholderText = "Search..."
searchBar.Text = ""
searchBar.Font = Enum.Font.SourceSans
searchBar.TextScaled = true
searchBar.TextColor3 = Color3.fromRGB(200,200,200)
searchBar.ClearTextOnFocus = true
searchBar.BackgroundColor3 = Color3.fromRGB(30,30,30)
searchBar.BorderSizePixel = 0
searchBar.Size = UDim2.new(0.86, 0, 0, 34)
searchBar.Position = UDim2.new(0.07, 0, 0, 48) -- below header
searchBar.ZIndex = frame.ZIndex + 1
local searchCorner = Instance.new("UICorner", searchBar)
searchCorner.CornerRadius = UDim.new(0,8)

-- Main label 'GAZE' at top-left but below header
local gazeLabel = Instance.new("TextLabel", frame)
gazeLabel.Name = "GazeLabel"
gazeLabel.Text = "GAZE"
gazeLabel.Font = Enum.Font.GothamBold
gazeLabel.TextScaled = true
gazeLabel.TextColor3 = Color3.fromRGB(255,255,255)
gazeLabel.BackgroundTransparency = 1
gazeLabel.Size = UDim2.new(0.25,0,0,32)
gazeLabel.Position = UDim2.new(0.07,0,0,12)
gazeLabel.ZIndex = frame.ZIndex + 1

-- Scroll frame for buttons
local scrollFrame = Instance.new("ScrollingFrame", frame)
scrollFrame.Name = "ScrollFrame"
scrollFrame.Size = UDim2.new(0.86, 0, 0.72, 0)
scrollFrame.Position = UDim2.new(0.07, 0, 0, 96)
scrollFrame.BackgroundTransparency = 1
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 6
scrollFrame.CanvasSize = UDim2.new(0,0,0,0)
scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
local scrollCorner = Instance.new("UICorner", scrollFrame)
scrollCorner.CornerRadius = UDim.new(0,6)

-- small footer area for donate/emote buttons if needed
local footer = Instance.new("Frame", frame)
footer.Name = "Footer"
footer.Size = UDim2.new(1,0,0,42)
footer.Position = UDim2.new(0,0,1,-46)
footer.BackgroundTransparency = 1

-- Toggle button (separate ScreenGui so it can be dragged independent)
local toggleGui = Instance.new("ScreenGui")
toggleGui.Name = "PrimeToggleGui"
toggleGui.ResetOnSpawn = false
toggleGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
toggleGui.Parent = CoreGui

local toggleFrame = Instance.new("Frame", toggleGui)
toggleFrame.Name = "PrimeToggleFrame"
toggleFrame.Size = UDim2.new(0, 110, 0, 36)
toggleFrame.Position = UDim2.new(1, -130, 0, 12)
toggleFrame.BackgroundColor3 = Color3.fromRGB(28,28,28)
toggleFrame.BorderSizePixel = 0
toggleFrame.AnchorPoint = Vector2.new(0,0)
toggleFrame.Active = true
toggleFrame.Draggable = true

local toggleCorner = Instance.new("UICorner", toggleFrame)
toggleCorner.CornerRadius = UDim.new(0,10)

local toggleButton = Instance.new("TextButton", toggleFrame)
toggleButton.Size = UDim2.new(1, -8, 1, -6)
toggleButton.Position = UDim2.new(0, 4, 0, 3)
toggleButton.BackgroundColor3 = Color3.fromRGB(45,45,45)
toggleButton.BorderSizePixel = 0
toggleButton.Text = "Prime"
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextScaled = true
toggleButton.TextColor3 = Color3.fromRGB(255,255,255)
local toggleBtnCorner = Instance.new("UICorner", toggleButton)
toggleBtnCorner.CornerRadius = UDim.new(0,8)

toggleButton.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
    toggleButton.Text = frame.Visible and "Prime" or "Show"
end)

-- ===========================
-- Button factory + lists
-- ===========================
local buttons = {}
local function updateCanvasSize()
    local count = #buttons
    local totalHeight = count * 46
    scrollFrame.CanvasSize = UDim2.new(0,0,0, totalHeight)
end

local function createTheButton(text, callback)
    local button = Instance.new("TextButton")
    button.Text = tostring(text)
    button.Font = Enum.Font.SourceSansBold
    button.TextScaled = true
    button.TextColor3 = Color3.fromRGB(230,230,230)
    button.BackgroundColor3 = Color3.fromRGB(50,50,50)
    button.Size = UDim2.new(1, 0, 0, 40)
    button.Position = UDim2.new(0, 0, 0, #buttons * 46)
    button.AnchorPoint = Vector2.new(0,0)
    button.BackgroundTransparency = 0
    button.BorderSizePixel = 0
    button.Parent = scrollFrame
    local btnCorner = Instance.new("UICorner", button)
    btnCorner.CornerRadius = UDim.new(0,6)

    button.MouseButton1Click:Connect(function()
        pcall(callback)
    end)

    table.insert(buttons, button)
    updateCanvasSize()
end

-- createButton wrapper matches old signature (tab, text, animationType, animationId)
local function createButton(tab, text, animationType, animationId)
    createTheButton(text .. " - " .. tostring(animationType), function()
        pcall(function()
            setAnimation(animationType, animationId)
            Notify(animationType, text, 1)
        end)
    end)
end

-- ===========================
-- Animations table (kept from original, trimmed/kept)
-- ===========================
local Animations = {
    ["Idle"] = {
        ["2016 Animation (mm2)"] = {"387947158", "387947464"},
        ["Astronaut"] = {"891621366", "891633237"},
        ["Bold"] = {"16738333868", "16738334710"},
        ["Bubbly"] = {"910004836", "910009958"},
        ["Cartoony"] = {"742637544", "742638445"},
        ["Confident"] = {"1069977950", "1069987858"},
        ["R15 Reanimated"] = {"4211217646", "4211218409"},
        ["Robot"] = {"616088211", "616089559"},
        ["Zombie"] = {"616158929", "616160636"}
    },
    ["Walk"] = {
        ["Astronaut"] = "891667138",
        ["Cartoony"] = "742640026",
        ["Confident"] = "1070017263",
        ["Robot"] = "616095330",
    },
    ["Run"] = {
        ["2016 Animation (mm2)"] = "387947975",
        ["Cartoony"] = "10921076136",
        ["Robot"] = "10921250460",
    },
    ["Jump"] = {
        ["Astronaut"] = "891627522",
        ["Cartoony"] = "742637942",
        ["Robot"] = "616090535",
    },
    ["Fall"] = {
        ["Astronaut"] = "891617961",
        ["Bubbly"] = "910001910",
    },
    ["SwimIdle"] = {},
    ["Swim"] = {},
    ["Climb"] = {}
}

-- ===========================
-- Animation control helpers
-- ===========================
local lastAnimations = {}

local function StopAnim()
    local pl = Players.LocalPlayer
    if not pl then return end
    local ch = pl.Character
    if not ch then return end
    local Hum = ch:FindFirstChildOfClass("Humanoid") or ch:FindFirstChildOfClass("AnimationController")
    if Hum then
        for _, track in ipairs(Hum:GetPlayingAnimationTracks()) do
            track:Stop(0)
        end
    end
end

local function ResetIdle()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    local Hum = ch:FindFirstChildOfClass("Humanoid")
    if Hum and ch:FindFirstChild("Animate") then
        pcall(function()
            local Animate = ch.Animate
            Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id=0"
            Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetWalk()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") then
        pcall(function()
            ch.Animate.walk.WalkAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetRun()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") then
        pcall(function()
            ch.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetJump()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") then
        pcall(function()
            ch.Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetFall()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") then
        pcall(function()
            ch.Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetSwim()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") and ch.Animate:FindFirstChild("swim") then
        pcall(function()
            ch.Animate.swim.Swim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetSwimIdle()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") and ch.Animate:FindFirstChild("swimidle") then
        pcall(function()
            ch.Animate.swimidle.SwimIdle.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetClimb()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") and ch.Animate:FindFirstChild("climb") then
        pcall(function()
            ch.Animate.climb.ClimbAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end

local function refresh()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    local h = ch:FindFirstChildOfClass("Humanoid")
    if h then
        pcall(function() h:ChangeState(Enum.HumanoidStateType.Freefall) end)
    end
end
local function refreshswim()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    local h = ch:FindFirstChildOfClass("Humanoid")
    if h then
        pcall(function()
            h:ChangeState(Enum.HumanoidStateType.GettingUp)
            task.wait(0.1)
            h:ChangeState(Enum.HumanoidStateType.Swimming)
        end)
    end
end
local function refreshclimb()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    local h = ch:FindFirstChildOfClass("Humanoid")
    if h then
        pcall(function()
            h:ChangeState(Enum.HumanoidStateType.GettingUp)
            task.wait(0.1)
            h:ChangeState(Enum.HumanoidStateType.Climbing)
        end)
    end
end

-- freeze/unfreeze safe wrapper
local function freeze()
    local p = cloneref(Players).LocalPlayer
    local char = p.Character or p.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = true
    end
    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") and not part.Anchored then
            pcall(function() part.Anchored = true end)
        end
    end
end
local function unfreeze()
    local p = cloneref(Players).LocalPlayer
    local char = p.Character or p.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = false
    end
    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") and part.Anchored then
            pcall(function() part.Anchored = false end)
        end
    end
end

-- setAnimation: apply via Animate module if present + attempt to play animation track
function setAnimation(animationType, animationId)
    -- save
    lastAnimations[animationType] = animationId
    -- apply
    local pl = Players.LocalPlayer
    local ch = pl.Character or pl.CharacterAdded:Wait()
    local Animate = ch:FindFirstChild("Animate")
    -- freeze briefly to avoid jitter when swapping many animations
    freeze()
    task.wait(0.08)
    pcall(function()
        if animationType == "Idle" then
            ResetIdle()
            if type(animationId) == "table" then
                if Animate and Animate:FindFirstChild("idle") then
                    Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId[1])
                    Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId[2])
                end
            else
                if Animate and Animate:FindFirstChild("idle") then
                    Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
                    Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
                end
            end
            refresh()
        elseif animationType == "Walk" then
            lastAnimations.Walk = animationId
            ResetWalk()
            if Animate and Animate:FindFirstChild("walk") then
                Animate.walk.WalkAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refresh()
        elseif animationType == "Run" then
            lastAnimations.Run = animationId
            ResetRun()
            if Animate and Animate:FindFirstChild("run") then
                Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refresh()
        elseif animationType == "Jump" then
            lastAnimations.Jump = animationId
            ResetJump()
            if Animate and Animate:FindFirstChild("jump") then
                Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refresh()
        elseif animationType == "Fall" then
            lastAnimations.Fall = animationId
            ResetFall()
            if Animate and Animate:FindFirstChild("fall") then
                Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refresh()
        elseif animationType == "Swim" then
            lastAnimations.Swim = animationId
            ResetSwim()
            if Animate and Animate:FindFirstChild("swim") then
                Animate.swim.Swim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refreshswim()
        elseif animationType == "SwimIdle" then
            lastAnimations.SwimIdle = animationId
            ResetSwimIdle()
            if Animate and Animate:FindFirstChild("swimidle") then
                Animate.swimidle.SwimIdle.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refreshswim()
        elseif animationType == "Climb" then
            lastAnimations.Climb = animationId
            ResetClimb()
            if Animate and Animate:FindFirstChild("climb") then
                Animate.climb.ClimbAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refreshclimb()
        end
    end)
    task.wait(0.08)
    unfreeze()

    -- also attempt to play animation track for immediate feedback (humanoid)
    pcall(function()
        local hum = ch:FindFirstChildOfClass("Humanoid") or ch:FindFirstChildOfClass("AnimationController")
        if hum then
            for _, t in ipairs(hum:GetPlayingAnimationTracks()) do
                if t.Name == animationType then
                    t:Stop(0)
                end
            end
            local anim = Instance.new("Animation")
            if type(animationId) == "table" then
                anim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId[1])
            else
                anim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            local track = hum:LoadAnimation(anim)
            track.Name = animationType
            track:Play()
        end
    end)
    -- save file for restore
    pcall(function()
        if writefile then
            pcall(function() writefile("MeWhenUrMom.json", HttpService:JSONEncode(lastAnimations)) end)
        end
    end)
end

-- ===========================
-- Save / Load last animations
-- ===========================
local function loadLastAnimations()
    pcall(function()
        if isfile and isfile("MeWhenUrMom.json") then
            local data = readfile("MeWhenUrMom.json")
            local decoded = HttpService:JSONDecode(data)
            for k,v in pairs(decoded) do
                lastAnimations[k] = v
            end
            Notify("Saved Animations", "Loaded saved animations", 4)
        end
    end)
end
loadLastAnimations()

-- ===========================
-- Emote + Donate helpers
-- ===========================
local function PlayEmote(animationId)
    pcall(function()
        StopAnim()
        local pl = Players.LocalPlayer
        local ch = pl.Character or pl.CharacterAdded:Wait()
        local humanoid = ch:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. tostring(animationId)
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            Notify("Emote", "Playing "..tostring(animationId), 2)
        end
    end)
end

local function AddEmote(name, id)
    createTheButton("Emote: "..tostring(name), function() PlayEmote(id) end)
end

local function Buy(gamePassID)
    local MarketplaceService = game:GetService("MarketplaceService")
    local success, err = pcall(function()
        MarketplaceService:PromptGamePassPurchase(LocalPlayer, gamePassID)
    end)
    if not success then
        pcall(function() setclipboard("https://www.roblox.com/game-pass/" .. tostring(gamePassID)) end)
        Notify("Copied", "Gamepass Link to clipboard", 4)
    end
end

local function AddDonate(Price, Id)
    createTheButton("Donate "..tostring(Price).." Robux", function()
        Buy(Id)
    end)
end

-- ===========================
-- Populate UI with animation buttons
-- ===========================
for groupName, groupTable in pairs(Animations) do
    if type(groupTable) == "table" then
        for name, id in pairs(groupTable) do
            -- small yield to avoid blocking
            task.wait(0.01)
            createButton(nil, name, groupName, id)
        end
    end
end

-- add some control buttons at bottom
createTheButton("Reset All Idle", function()
    ResetIdle(); Notify("Reset", "Idle reset", 2)
end)
createTheButton("Stop All Animations", function()
    StopAnim(); Notify("Stopped", "All animation tracks stopped", 2)
end)

-- sample donate/emotes
AddDonate(20, 1131371530)
AddDonate(200, 1131065702)
AddEmote("Dance 1", 12521009666)
AddEmote("Wave", 12521004586)

-- ===========================
-- Search functionality
-- ===========================
searchBar:GetPropertyChangedSignal("Text"):Connect(function()
    local searchText = tostring(searchBar.Text):lower()
    local order = 0
    for i, but in ipairs(buttons) do
        local t = but.Text:lower()
        if searchText == "" or string.find(t, searchText, 1, true) then
            but.Visible = true
            but.Position = UDim2.new(0, 0, 0, order * 46)
            order = order + 1
        else
            but.Visible = false
        end
    end
    scrollFrame.CanvasSize = UDim2.new(0,0,0, order * 46)
end)

-- ===========================
-- RGB color cycle for border + prime label
-- ===========================
local hueSpeed = 1 / 1.8 -- full cycle per ~1.8s
local startTick = tick()
RunService.Heartbeat:Connect(function(dt)
    local t = (tick() - startTick) * hueSpeed
    local hue = t % 1 -- 0..1
    local color = Color3.fromHSV(hue, 0.85, 0.95)
    borderStroke.Color = color
    primeLabel.TextColor3 = Color3.fromHSV((hue + 0.05) % 1, 0.9, 1)
    primeGlow.Color = primeLabel.TextColor3
end)

-- ===========================
-- Final touches: show load notifications
-- ===========================
Notify("PLEASE", "Donate me, im poor :(", 3)
local lt = os.clock() - st
Notify("Loaded", string.format("in %.2f seconds.", lt), 4)
Notify("Changelog", "added '(UGC) Animations' + Prime header + RGB border", 8)

-- ===========================
-- Character added reapply saved animations
-- ===========================
Players.LocalPlayer.CharacterAdded:Connect(function(character)
    task.wait(0.2)
    for k,v in pairs(lastAnimations) do
        pcall(function() setAnimation(k, v) end)
    end
end)

end) -- pcall end        title.BackgroundTransparency = 0.9  
        title.Size = UDim2.new(1, 0, 0, nh / 2)  
        title.Font = Enum.Font.GothamBold  
        title.Text = titletxt  
        title.TextColor3 = Color3.new(1, 1, 1)  
        title.TextScaled = true  

        message.BackgroundColor3 = Color3.new(0, 0, 0)  
        message.BackgroundTransparency = 1  
        message.Position = UDim2.new(0, 0, 0, nh / 2)  
        message.Size = UDim2.new(1, 0, 1, -nh / 2)  
        message.Font = Enum.Font.Gotham  
        message.Text = text  
        message.TextColor3 = Color3.new(1, 1, 1)  
        message.TextScaled = true  

        local offset = 50  
        for _, notif in ipairs(Notifbro) do  
            offset = offset + notif.Size.Y.Offset + 10  
        end  

        Main.Position = UDim2.new(1, 5, 0, offset)  
        table.insert(Notifbro, Main)  

        task.wait(0.1)  
        Main:TweenPosition(UDim2.new(1, -nw, 0, offset), Enum.EasingDirection.Out, Enum.EasingStyle.Bounce, 0.5, true)  
        Main:TweenSize(UDim2.new(0, nw * 1.06, 0, nh * 1.06), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.5, true)  
        task.wait(0.1)  
        Main:TweenSize(UDim2.new(0, nw, 0, nh), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.2, true)  

        task.wait(time)  

        Main:TweenSize(UDim2.new(0, nw * 1.06, 0, nh * 1.06), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.2, true)  
        task.wait(0.2)  
        Main:TweenSize(UDim2.new(0, nw, 0, nh), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.2, true)  
        task.wait(0.2)  
        Main:TweenPosition(UDim2.new(1, 5, 0, offset), Enum.EasingDirection.In, Enum.EasingStyle.Bounce, 0.5, true)  
        task.wait(0.1)  

        GUI:Destroy()  
        for i, notif in ipairs(Notifbro) do  
            if notif == Main then  
                table.remove(Notifbro, i)  
                break  
            end  
        end  

        for i, notif in ipairs(Notifbro) do  
            local newOffset = 50 + (nh + 10) * (i - 1)  
            notif:TweenPosition(UDim2.new(1, -nw, 0, newOffset), Enum.EasingDirection.Out, Enum.EasingStyle.Bounce, 0.5, true)  
        end  
    end)()

end

task.wait(0.1)

local guiName = "GazeVerificator"

if GazeGoGui:FindFirstChild(guiName) then
    Notify("Error","Script Already Executed", 1)
    return
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = guiName
screenGui.Parent = GazeGoGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 0, 0, 0)
frame.Visible = false
frame.Parent = screenGui

print("Running Script, May Lags A Bit")

local TweenService = game:GetService("TweenService")
local camera = workspace.CurrentCamera

local function getScaledSize(relativeWidth, relativeHeight)
    local viewportSize = camera.ViewportSize
    return UDim2.new(0, viewportSize.X * relativeWidth, 0, viewportSize.Y * relativeHeight)
end

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "DraggableGui"
screenGui.Parent = cloneref(game.CoreGui)

local frame = Instance.new("TextButton")
frame.Name = "GazeBro"
frame.Text = ""
frame.Size = getScaledSize(0.3, 0.4) -- Frame is 30% of width and 40% of height
frame.Position = UDim2.new(0.5, -frame.Size.X.Offset / 2, 0.5, -frame.Size.Y.Offset / 2) -- Centered
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.BackgroundTransparency = 0.2
frame.BorderSizePixel = 2
frame.BorderColor3 = Color3.new(0, 0, 0)
frame.Active = true
frame.Draggable = true
frame.Parent = screenGui
local labelSize = UDim2.new(1, 0, 0.1, 0)

local gazeLabel = Instance.new("TextLabel")
gazeLabel.Name = "GazeLabel"
gazeLabel.Text = "GAZE"
gazeLabel.Font = Enum.Font.SourceSansBold
gazeLabel.TextScaled = true
gazeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
gazeLabel.BackgroundTransparency = 1
gazeLabel.Size = labelSize
gazeLabel.Position = UDim2.new(0, 0, 0, 0)
gazeLabel.Parent = frame

-- === START: PRIME HEADER + TOGGLE (added as requested) ===
do
    local coreGui = cloneref(game:GetService("CoreGui")) or game:GetService("CoreGui")
    local player = game:GetService("Players").LocalPlayer

    -- Tạo khung đầu menu có chữ PrimeVip
    local headerHeight = 30
    local header = Instance.new("Frame")
    header.Name = "PrimeHeader"
    header.Size = UDim2.new(1, 0, 0, headerHeight)
    header.Position = UDim2.new(0, 0, 0, 0)
    header.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    header.BorderSizePixel = 2
    header.BorderColor3 = Color3.fromRGB(0, 170, 255) -- Màu viền xanh dương PrimeVip
    header.ZIndex = 10
    header.Parent = frame

    -- Chữ PrimeVip
    local primeText = Instance.new("TextLabel")
    primeText.Name = "PrimeText"
    primeText.Parent = header
    primeText.Size = UDim2.new(1, 0, 1, 0)
    primeText.BackgroundTransparency = 1
    primeText.Text = "PrimeVip"
    primeText.Font = Enum.Font.GothamBold
    primeText.TextScaled = true
    primeText.TextColor3 = Color3.fromRGB(255, 215, 0) -- Vàng ánh kim
    primeText.ZIndex = 11

    -- Đẩy GazeLabel xuống dưới khung header
    gazeLabel.Position = UDim2.new(0, 0, 0, headerHeight + 2)

    -- Widget bật/tắt ở góc phải
    if not coreGui:FindFirstChild("PrimeToggleGui") then
        local toggleGui = Instance.new("ScreenGui")
        toggleGui.Name = "PrimeToggleGui"
        toggleGui.ResetOnSpawn = false
        toggleGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
        toggleGui.Parent = coreGui

        local toggleFrame = Instance.new("Frame")
        toggleFrame.Name = "PrimeToggleFrame"
        toggleFrame.Size = UDim2.new(0, 120, 0, 35)
        toggleFrame.Position = UDim2.new(1, -130, 0, 10)
        toggleFrame.AnchorPoint = Vector2.new(0, 0)
        toggleFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
        toggleFrame.BorderSizePixel = 2
        toggleFrame.BorderColor3 = Color3.fromRGB(0, 170, 255)
        toggleFrame.Active = true
        toggleFrame.Draggable = true
        toggleFrame.Parent = toggleGui

        local toggleButton = Instance.new("TextButton")
        toggleButton.Name = "PrimeToggleButton"
        toggleButton.Size = UDim2.new(1, 0, 1, 0)
        toggleButton.BackgroundTransparency = 0
        toggleButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        toggleButton.Text = "Prime"
        toggleButton.Font = Enum.Font.GothamBold
        toggleButton.TextScaled = true
        toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleButton.Parent = toggleFrame

        -- Bấm nút để ẩn/hiện menu chính
        toggleButton.MouseButton1Click:Connect(function()
            frame.Visible = not frame.Visible
            toggleButton.Text = frame.Visible and "Prime" or "Show"
        end)
    end
end
-- === END: PRIME HEADER + TOGGLE ===

local searchBar = Instance.new("TextBox")
searchBar.Name = "SearchBar"
searchBar.Text = ""
searchBar.PlaceholderText = "Search..."
searchBar.Font = Enum.Font.SourceSans
searchBar.TextScaled = true
searchBar.TextColor3 = Color3.fromRGB(200, 200, 200)
searchBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
searchBar.BorderSizePixel = 0
searchBar.Size = UDim2.new(0.9, 0, 0.2, 0)
searchBar.Position = UDim2.new(0.05, 0, 0.10, 0)
searchBar.ClearTextOnFocus = true
searchBar.Parent = frame

local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Name = "ScrollFrame"
scrollFrame.Size = UDim2.new(0.9, 0, 0.7, 0)
scrollFrame.Position = UDim2.new(0.05, 0, 0.3, 0)
scrollFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 0
scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollFrame.ScrollBarImageTransparency = 1
scrollFrame.Parent = frame

local TweenService = game:GetService("TweenService")
local buttons = {}

-- createTheButton exists in original; we'll keep aliasing to createButton for compatibility
local function createButton(_, name, group, id)
    -- first param is ignored (original code sometimes passed category variable)
    local text = tostring(name)
    local function callback()
        -- set animation depending on group and id
        setAnimation(group, id)
    end

    -- Use createTheButton UI placement style if original used that
    local button = Instance.new("TextButton")
    button.Text = text
    button.Font = Enum.Font.SourceSansBold
    button.TextScaled = true
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    button.Size = UDim2.new(1, 0, 0, 40)
    button.Position = UDim2.new(1, 0, 0, #buttons * 45)
    button.BackgroundTransparency = 1
    button.BorderSizePixel = 0
    button.Parent = scrollFrame

    button.MouseButton1Click:Connect(callback)

    local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local goal = {
        Position = UDim2.new(0, 0, 0, #buttons * 45),
        BackgroundTransparency = 0
    }
    local tween = TweenService:Create(button, tweenInfo, goal)
    tween:Play()

    table.insert(buttons, button)
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, #buttons * 45)
end

-- Keep createTheButton name for compatibility
local createTheButton = function(text, callback)
    -- wrapper that uses earlier createTheButton signature (text, callback)
    local button = Instance.new("TextButton")
    button.Text = text
    button.Font = Enum.Font.SourceSansBold
    button.TextScaled = true
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    button.Size = UDim2.new(1, 0, 0, 40)
    button.Position = UDim2.new(1, 0, 0, #buttons * 45)
    button.BackgroundTransparency = 1
    button.BorderSizePixel = 0
    button.Parent = scrollFrame

    button.MouseButton1Click:Connect(callback)

    local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local goal = {
        Position = UDim2.new(0, 0, 0, #buttons * 45),
        BackgroundTransparency = 0
    }
    local tween = TweenService:Create(button, tweenInfo, goal)
    tween:Play()

    table.insert(buttons, button)
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, #buttons * 45)
end

searchBar:GetPropertyChangedSignal("Text"):Connect(function()
    local searchText = searchBar.Text:lower()
    local order = 0
    for _, button in ipairs(buttons) do
        if searchText == "" or button.Text:lower():find(searchText) then
            button.Visible = true
            button.Position = UDim2.new(0, 0, 0, order * 45) -- 5px spacing
            order += 1
        else
            button.Visible = false
        end
    end
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, order * 45)
end)

local normalSize = getScaledSize(0.3, 0.4)
local normalPosition = UDim2.new(0.5, -normalSize.X.Offset / 2, 0.5, -normalSize.Y.Offset / 2)
local smallerSize = getScaledSize(0.15, 0.2) -- Smaller size: 15% width, 20% height
local smallerPosition = UDim2.new(0.5, -smallerSize.X.Offset / 2, 0.5, -smallerSize.Y.Offset / 2)
local isSmall = false
local clickCount = 0
local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out)

local function handleDoubleClick()
    if isSmall then

        local tween = TweenService:Create(frame, tweenInfo, {Size = normalSize, Position = normalPosition})  
        tween:Play()
        task.wait(0.2)
        scrollFrame.Visible = true
        searchBar.Visible = true
        gazeLabel.Size = labelSize

    else

        local tween = TweenService:Create(frame, tweenInfo, {Size = smallerSize, Position = smallerPosition})
        scrollFrame.Visible = false
        searchBar.Visible = false
        gazeLabel.Size = UDim2.new(1, 0, 1, 0)
        task.wait(0.2)
        tween:Play()
    end
    isSmall = not isSmall
end

frame.MouseButton1Click:Connect(function()
    clickCount += 1
    if clickCount == 1 then
        task.delay(0.5, function()
            clickCount = 0
        end)
    elseif clickCount == 2 then
        handleDoubleClick()
        clickCount = 0
    end
end)

local CurrentIdle = "None"
local CurrentWalk = "None"
local CurrentRun = "None"
local CurrentJump = "None"
local CurrentFall = "None"
local CurrentSwimIdle = "None"
local CurrentSwim = "None"
local CurrentClimb = "None"
local HttpService = game:GetService("HttpService")

local Players = game:GetService("Players")
local speaker = Players.LocalPlayer
local Char = speaker.Character or speaker.CharacterAdded:Wait()
local Animate = nil
pcall(function() Animate = Char:FindFirstChild("Animate") or Char:FindFirstChild("Animate", true) end)

local function Wait1()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:wait(0.1)
    local humanoid = character:WaitForChild("Humanoid")
    while humanoid.Health <= 2 do
        task.wait(0.3)
    end
end

local function Wait2()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:wait(0.1)
    local humanoid = character:WaitForChild("Humanoid")
    while humanoid:GetState() == Enum.HumanoidStateType.Dead or
          humanoid:GetState() == Enum.HumanoidStateType.Ragdoll do
        task.wait(0.3)
    end
end

local lastAnimations = {}

local Players = game:GetService("Players")

local function StopAnim()
    local speaker = Players.LocalPlayer
    local Char = speaker.Character or speaker.CharacterAdded:Wait()
    local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    if Hum then
        for _, track in ipairs(Hum:GetPlayingAnimationTracks()) do
            track:Stop(0)
        end
    end
end

local function refresh()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:wait(0.1)
    local humanoid = character:WaitForChild("Humanoid")

    humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
end

local function refreshswim()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:wait(0.1)
    local humanoid = character:WaitForChild("Humanoid")

    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    task.wait(0.1)
    humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
end

local function refreshclimb()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character or player.CharacterAdded:wait(0.1)
    local humanoid = character:WaitForChild("Humanoid")

    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    task.wait(0.1)
    humanoid:ChangeState(Enum.HumanoidStateType.Climbing)
end

task.wait(0.1)
local Animations = {
    ["Idle"] = {
        ["2016 Animation (mm2)"] = {"387947158", "387947464"},
        ["(UGC) Oh Really?"] = {"98004748982532", "98004748982532"},
        ["Astronaut"] = {"891621366", "891633237"},
        ["Adidas Community"] = {"122257458498464", "102357151005774"},
        ["Bold"] = {"16738333868", "16738334710"},
        ["(UGC) Slasher"] = {"140051337061095", "140051337061095"},
        ["(UGC) Retro"] = {"80479383912838", "80479383912838"},
        ["(UGC) Magician"] = {"139433213852503", "139433213852503"},
        ["(UGC) John Doe"] = {"72526127498800", "72526127498800"},
        ["(UGC) Noli"] = {"139360856809483", "139360856809483"},
        ["(UGC) Coolkid"] = {"95203125292023", "95203125292023"},
        ["(UGC) Survivor Injured"] = {"73905365652295", "73905365652295"},
        ["(UGC) Retro Zombie"] = {"90806086002292", "90806086002292"},
        ["(UGC) 1x1x1x1"] = {"76780522821306", "76780522821306"},
        ["Borock"] = {"3293641938", "3293642554"},
        ["Bubbly"] = {"910004836", "910009958"},
        ["Cartoony"] = {"742637544", "742638445"},
        ["Confident"] = {"1069977950", "1069987958"},
        ["Catwalk Glam"] = {"133806214992291","94970088341563"},
        ["Cowboy"] = {"1014390418", "1014398616"},
        ["Drooling Zombie"] = {"3489171152", "3489171152"},
        ["Elder"] = {"10921101664", "10921102574"},
        ["Ghost"] = {"616006778","616008087"},
        ["Knight"] = {"657595757", "657568135"},
        ["Levitation"] = {"616006778", "616008087"},
        ["Mage"] = {"707742142", "707855907"},
        ["MrToilet"] = {"4417977954", "4417978624"},
        ["Ninja"] = {"656117400", "656118341"},
        ["NFL"] = {"92080889861410", "74451233229259"},
        ["OldSchool"] = {"10921230744", "10921232093"},
        ["Patrol"] = {"1149612882", "1150842221"},
        ["Pirate"] = {"750781874", "750782770"},
        ["Default Retarget"] = {"95884606664820", "95884606664820"},
        ["Very Long"] = {"18307781743", "18307781743"},
        ["Sway"] = {"560832030", "560833564"},
        ["Popstar"] = {"1212900985", "1150842221"},
        ["Princess"] = {"941003647", "941013098"},
        ["R6"] = {"12521158637","12521162526"},
        ["R15 Reanimated"] = {"4211217646", "4211218409"},
        ["Realistic"] = {"17172918855", "17173014241"},
        ["Robot"] = {"616088211", "616089559"},
        ["Sneaky"] = {"1132473842", "1132477671"},
        ["Sports (Adidas)"] = {"18537376492", "18537371272"},
        ["Soldier"] = {"3972151362", "3972151362"},
        ["Stylish"] = {"616136790", "616138447"},
        ["Stylized Female"] = {"4708191566", "4708192150"},
        ["Superhero"] = {"10921288909", "10921290167"},
        ["Toy"] = {"782841498", "782845736"},
        ["Udzal"] = {"3303162274", "3303162549"},
        ["Vampire"] = {"1083445855", "1083450166"},
        ["Werewolf"] = {"1083195517", "1083214717"},
        ["Wicked (Popular)"] = {"118832222982049", "76049494037641"},
        ["No Boundaries (Walmart)"] = {"18747067405", "18747063918"},
        ["Zombie"] = {"616158929", "616160636"},
        ["(UGC) Zombie"] = {"77672872857991", "77672872857991"},
        ["(UGC) TailWag"] = {"129026910898635", "129026910898635"}
    },
    ["Walk"] = {
        ["Gojo"] = "95643163365384",
        ["Geto"] = "85811471336028",
        ["Astronaut"] = "891667138",
        ["(UGC) Zombie"] = "113603435314095",
        ["Adidas Community"] = "122150855457006",
        ["Bold"] = "16738340646",
        ["Bubbly"] = "910034870",
        ["(UGC) Smooth"] = "76630051272791",
        ["Cartoony"] = "742640026",
        ["Confident"] = "1070017263",
        ["Cowboy"] = "1014421541",
        ["(UGC) Retro"] = "107806791584829",
        ["(UGC) Retro Zombie"] = "140703855480494",
        ["Catwalk Glam"] = "109168724482748",
        ["Drooling Zombie"] = "3489174223",
        ["Elder"] = "10921111375",
        ["Ghost"] = "616013216",
        ["Knight"] = "10921127095",
        ["Levitation"] = "616013216",
        ["Mage"] = "707897309",
        ["Ninja"] = "656121766",
        ["NFL"] = "110358958299415",
        ["OldSchool"] = "10921244891",
        ["Patrol"] = "1151231493",
        ["Pirate"] = "750785693",
        ["Default Retarget"] = "115825677624788",
        ["Popstar"] = "1212980338",
        ["Princess"] = "941028902",
        ["R6"] = "12518152696",
        ["R15 Reanimated"] = "4211223236",
        ["2016 Animation (mm2)"] = "387947975",
        ["Robot"] = "616095330",
        ["Sneaky"] = "1132510133",
        ["Sports (Adidas)"] = "18537392113",
        ["Stylish"] = "616146177",
        ["Stylized Female"] = "4708193840",
        ["Superhero"] = "10921298616",
        ["Toy"] = "782843345",
        ["Udzal"] = "3303162967",
        ["Vampire"] = "1083473930",
        ["Werewolf"] = "1083178339",
        ["Wicked (Popular)"] = "92072849924640",
        ["No Boundaries (Walmart)"] = "18747074203",
        ["Zombie"] = "616168032"
    },
    ["Run"] = {
        ["2016 Animation (mm2)"] = "387947975",
        ["(UGC) Soccer"] = "116881956670910",
        ["Adidas Community"] = "82598234841035",
        ["Astronaut"] = "10921039308",
        ["Bold"] = "16738337225",
        ["Bubbly"] = "10921057244",
        ["Cartoony"] = "10921076136",
        ["(UGC) Dog"] = "130072963359721",
        ["Confident"] = "1070001516",
        ["(UGC) Pride"] = "116462200642360",
        ["(UGC) Retro"] = "107806791584829",
        ["(UGC) Retro Zombie"] = "140703855480494",
        ["Cowboy"] = "1014401683",
        ["Catwalk Glam"] = "81024476153754",
        ["Drooling Zombie"] = "3489173414",
        ["Elder"] = "10921104374",
        ["Ghost"] = "616013216",
        ["Heavy Run (Udzal / Borock)"] = "3236836670",
        ["Knight"] = "10921121197",
        ["Levitation"] = "616010382",
        ["Mage"] = "10921148209",
        ["MrToilet"] = "4417979645",
        ["Ninja"] = "656118852",
        ["NFL"] = "117333533048078",
        ["OldSchool"] = "10921240218",
        ["Patrol"] = "1150967949",
        ["Pirate"] = "750783738",
        ["Default Retarget"] = "102294264237491",
        ["Popstar"] = "1212980348",
        ["Princess"] = "941015281",
        ["R6"] = "12518152696",
        ["R15 Reanimated"] = "4211220381",
        ["Robot"] = "10921250460",
        ["Sneaky"] = "1132494274",
        ["Sports (Adidas)"] = "18537384940",
        ["Stylish"] = "10921276116",
        ["Stylized Female"] = "4708192705",
        ["Superhero"] = "10921291831",
        ["Toy"] = "10921306285",
        ["Vampire"] = "10921320299",
        ["Werewolf"] = "10921336997",
        ["Wicked (Popular)"] = "72301599441680",
        ["No Boundaries (Walmart)"] = "18747070484",
        ["Zombie"] = "616163682"
    },
    ["Jump"] = {
        ["Astronaut"] = "891627522",
        ["Adidas Community"] = "75290611992385",
        ["Bold"] = "16738336650",
        ["Bubbly"] = "910016857",
        ["Cartoony"] = "742637942",
        ["Catwalk Glam"] = "116936326516985",
        ["Confident"] = "1069984524",
        ["Cowboy"] = "1014394726",
        ["Elder"] = "10921107367",
        ["Ghost"] = "616008936",
        ["Knight"] = "910016857",
        ["Levitation"] = "616008936",
        ["Mage"] = "10921149743",
        ["Ninja"] = "656117878",
        ["NFL"] = "119846112151352",
        ["OldSchool"] = "10921242013",
        ["Patrol"] = "1148811837",
        ["Pirate"] = "750782230",
        ["(UGC) Retro"] = "139390570947836",
        ["Default Retarget"] = "117150377950987",
        ["Popstar"] = "1212954642",
        ["Princess"] = "941008832",
        ["Robot"] = "616090535",
        ["R15 Reanimated"] = "4211219390",
        ["R6"] = "12520880485",
        ["Sneaky"] = "1132489853",
        ["Sports (Adidas)"] = "18537380791",
        ["Stylish"] = "616139451",
        ["Stylized Female"] = "4708188025",
        ["Superhero"] = "10921294559",
        ["Toy"] = "10921308158",
        ["Vampire"] = "1083455352",
        ["Werewolf"] = "1083218792",
        ["Wicked (Popular)"] = "104325245285198",
        ["No Boundaries (Walmart)"] = "18747069148",
        ["Zombie"] = "616161997"
    },
    ["Fall"] = {
        ["Astronaut"] = "891617961",
        ["Adidas Community"] = "98600215928904",
        ["Bold"] = "16738333171",
        ["Bubbly"] = "910001910"
    },
    -- placeholders for other groups referenced later (so createButton loops won't error if missing)
    ["SwimIdle"] = {},
    ["Swim"] = {},
    ["Climb"] = {}
}

-- setAnimation: attempts to set the Animate module's AnimationId(s) where possible,
-- and saves to lastAnimations so respawn can reapply.
function setAnimation(group, id)
    -- id may be string or table {id1,id2}
    lastAnimations[group] = id

    -- Try to set animation via Animate object (if present)
    pcall(function()
        -- refresh Animate variable if necessary
        local speaker = Players.LocalPlayer
        local CharLocal = speaker.Character or speaker.CharacterAdded:Wait()
        Animate = Animate or CharLocal:FindFirstChild("Animate")
        if Animate then
            if group == "Idle" then
                if type(id) == "table" then
                    pcall(function() Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id[1]) end)
                    pcall(function() Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id[2]) end)
                else
                    -- single id for both slots
                    pcall(function() Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
                    pcall(function() Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
                end
            elseif group == "Walk" then
                pcall(function() Animate.walk.WalkAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
            elseif group == "Run" then
                pcall(function() Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
            elseif group == "Jump" then
                pcall(function() Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
            elseif group == "Fall" then
                pcall(function() Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
            elseif group == "Swim" then
                pcall(function() Animate.swim.SwimAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
            elseif group == "SwimIdle" then
                pcall(function() Animate.swimidle.SwimIdleAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
            elseif group == "Climb" then
                pcall(function() Animate.climb.ClimbAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id) end)
            end
        end
    end)

    -- Additionally, attempt to play the animation via Humanoid (covers cases with AnimationController)
    pcall(function()
        local pl = Players.LocalPlayer
        local ch = pl.Character or pl.CharacterAdded:Wait()
        local hum = ch:FindFirstChildOfClass("Humanoid") or ch:FindFirstChildOfClass("AnimationController")
        if hum then
            -- Stop previous playing tracks with same name to avoid stacking
            for _, t in ipairs(hum:GetPlayingAnimationTracks()) do
                if tostring(t.Name) == tostring(group) then
                    t:Stop()
                end
            end
            -- Create Animation and play
            local anim = Instance.new("Animation")
            if type(id) == "table" then
                anim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id[1])
            else
                anim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id)
            end
            local track = hum:LoadAnimation(anim)
            track.Name = tostring(group)
            track:Play()
        end
    end)
end

-- AddDonate: creates a small donate button in scrollFrame (non-intrusive)
function AddDonate(amount, id)
    -- create a donation button that notifies player (you can extend to open a link)
    createTheButton("Donate " .. tostring(amount) .. "₫", function()
        Notify("Donate", "Donate ID: "..tostring(id).." — Thanks!", 3)
    end)
end

-- AddEmote: adds an emote button that plays the emote animation
function AddEmote(name, id)
    createTheButton("Emote: "..tostring(name), function()
        -- attempt to play the emote id
        pcall(function()
            local pl = Players.LocalPlayer
            local ch = pl.Character or pl.CharacterAdded:Wait()
            local hum = ch:FindFirstChildOfClass("Humanoid") or ch:FindFirstChildOfClass("AnimationController")
            if hum then
                local anim = Instance.new("Animation")
                anim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(id)
                local track = hum:LoadAnimation(anim)
                track:Play()
                Notify("Emote", tostring(name).." played.", 2)
            end
        end)
    end)
end

-- Fill buttons based on Animations table
-- For each group, create buttons for entries
for groupName, groupTable in pairs(Animations) do
    if type(groupTable) == "table" then
        for name, id in pairs(groupTable) do
            -- For Idle which had table of two IDs, pass them as table
            createButton(nil, name, groupName, id)
            task.wait(0.005)
        end
    end
end

-- Also add some basic Reset buttons (Reset Idle/Walk/Run/Jump)
createTheButton("Reset Idle", function() ResetIdle = function()
    local speaker = Players.LocalPlayer
    local CharLocal = speaker.Character or speaker.CharacterAdded:Wait()
    pcall(function()
        local AnimateLocal = CharLocal:FindFirstChild("Animate")
        if AnimateLocal then
            AnimateLocal.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id=0"
            AnimateLocal.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id=0"
        end
    end)
    Notify("Reset", "Idle reset", 2)
end
    ResetIdle()
end)

createTheButton("Reset Walk", function() ResetWalk() Notify("Reset", "Walk reset", 2) end)
createTheButton("Reset Run", function() ResetRun() Notify("Reset", "Run reset", 2) end)
createTheButton("Reset Jump", function() ResetJump() Notify("Reset", "Jump reset", 2) end)

-- connect Player.CharacterAdded to reapply lastAnimations on respawn
Players.LocalPlayer.CharacterAdded:Connect(function(character)
    -- wait to ensure Animate and Humanoid exist
    Wait1()
    Wait2()
    task.wait(0.1)
    if lastAnimations.Idle then
        setAnimation("Idle", lastAnimations.Idle)
    end
    if lastAnimations.Walk then
        setAnimation("Walk", lastAnimations.Walk)
    end
    if lastAnimations.Run then
        setAnimation("Run", lastAnimations.Run)
    end
    if lastAnimations.Jump then
        setAnimation("Jump", lastAnimations.Jump)
    end
    if lastAnimations.Fall then
        setAnimation("Fall", lastAnimations.Fall)
    end
    if lastAnimations.Climb then
        setAnimation("Climb", lastAnimations.Climb)
    end
    if lastAnimations.Swim then
        setAnimation("Swim", lastAnimations.Swim)
    end
    if lastAnimations.SwimIdle then
        setAnimation("SwimIdle", lastAnimations.SwimIdle)
    end
end)

-- Add sample donate/emote entries (as original)
AddDonate(20, 1131371530)
AddDonate(200, 1131065702)
AddDonate(183, 1129915318)
AddDonate(2000, 1128299749)
AddEmote("Dance 1", 12521009666)
AddEmote("Dance 2", 12521169800)
AddEmote("Dance 3", 12521178362)
AddEmote("Cheer", 12521021991)
AddEmote("Laugh", 12521018724)
AddEmote("Point", 12521007694)
AddEmote("Wave", 12521004586)

Notify("PLEASE", "Donate me, im poor :(", 1)
local lt = os.clock() - st
Notify("loaded", string.format("in %.2f seconds.", lt), 5)

Notify("Changelog", "added '(UGC) Animations' + Prime header", 30)
end)
