pcall(function()
-- ===========================
-- GAZE HUB â€” FULL COMPLETED
-- ===========================

-- R15 check
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then return end
if not LocalPlayer.Character or LocalPlayer.Character:WaitForChild("Humanoid").RigType ~= Enum.HumanoidRigType.R15 then
    game.StarterGui:SetCore("SendNotification", {Title = "R6", Text = "You're on R6, bro. Change to R15!", Duration = 60})
    return
end

local st = os.clock()
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
cloneref = cloneref or function(o) return o end
local CoreGui = cloneref(game:GetService("CoreGui")) or game:GetService("CoreGui")
local GazeGoGui = CoreGui or LocalPlayer:WaitForChild("PlayerGui")

-- ===========================
-- Notify helper
-- ===========================
local Notifbro = {}
local function Notify(titletxt, text, time)
    coroutine.wrap(function()
        local GUI = Instance.new("ScreenGui")
        local Main = Instance.new("Frame", GUI)
        local title = Instance.new("TextLabel", Main)
        local message = Instance.new("TextLabel", Main)

        GUI.Name = "BackgroundNotif"
        GUI.Parent = GazeGoGui

        local sw = workspace.CurrentCamera.ViewportSize.X
        local sh = workspace.CurrentCamera.ViewportSize.Y
        local nh = sh / 7
        local nw = sw / 5

        Main.Name = "MainFrame"
        Main.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Main.BackgroundTransparency = 0.15
        Main.BorderSizePixel = 0
        Main.Size = UDim2.new(0, nw, 0, nh)
        Main.AnchorPoint = Vector2.new(0,0)

        title.BackgroundColor3 = Color3.new(0, 0, 0)
        title.BackgroundTransparency = 0.9
        title.Size = UDim2.new(1, 0, 0, nh / 2)
        title.Font = Enum.Font.GothamBold
        title.Text = titletxt
        title.TextColor3 = Color3.new(1, 1, 1)
        title.TextScaled = true

        message.BackgroundColor3 = Color3.new(0, 0, 0)
        message.BackgroundTransparency = 1
        message.Position = UDim2.new(0, 0, 0, nh / 2)
        message.Size = UDim2.new(1, 0, 1, -nh / 2)
        message.Font = Enum.Font.Gotham
        message.Text = text
        message.TextColor3 = Color3.new(1, 1, 1)
        message.TextScaled = true

        local offset = 50
        for _, notif in ipairs(Notifbro) do
            offset = offset + notif.Size.Y.Offset + 10
        end

        Main.Position = UDim2.new(1, 5, 0, offset)
        table.insert(Notifbro, Main)

        task.wait(0.1)
        Main:TweenPosition(UDim2.new(1, -nw, 0, offset), Enum.EasingDirection.Out, Enum.EasingStyle.Bounce, 0.5, true)
        Main:TweenSize(UDim2.new(0, nw * 1.06, 0, nh * 1.06), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.5, true)
        task.wait(0.1)
        Main:TweenSize(UDim2.new(0, nw, 0, nh), Enum.EasingDirection.Out, Enum.EasingStyle.Elastic, 0.2, true)

        task.wait(time)

        Main:TweenSize(UDim2.new(0, nw * 1.06, 0, nh * 1.06), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.2, true)
        task.wait(0.2)
        Main:TweenSize(UDim2.new(0, nw, 0, nh), Enum.EasingDirection.In, Enum.EasingStyle.Elastic, 0.2, true)
        task.wait(0.2)
        Main:TweenPosition(UDim2.new(1, 5, 0, offset), Enum.EasingDirection.In, Enum.EasingStyle.Bounce, 0.5, true)
        task.wait(0.1)

        GUI:Destroy()
        for i, notif in ipairs(Notifbro) do
            if notif == Main then
                table.remove(Notifbro, i)
                break
            end
        end

        for i, notif in ipairs(Notifbro) do
            local newOffset = 50 + (nh + 10) * (i - 1)
            notif:TweenPosition(UDim2.new(1, -nw, 0, newOffset), Enum.EasingDirection.Out, Enum.EasingStyle.Bounce, 0.5, true)
        end
    end)()
end

task.wait(0.1)

-- Prevent duplicate
local guiName = "GazeVerificator"
if GazeGoGui:FindFirstChild(guiName) then
    Notify("Error", "Script Already Executed", 1)
    return
end

-- Base ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = guiName
screenGui.ResetOnSpawn = false
screenGui.Parent = GazeGoGui

-- helper for viewport scaled sizes
local camera = workspace.CurrentCamera
local function getScaledSize(relativeWidth, relativeHeight)
    local viewportSize = camera.ViewportSize
    return UDim2.new(0, math.floor(viewportSize.X * relativeWidth), 0, math.floor(viewportSize.Y * relativeHeight))
end

-- Main draggable container (frame)
local rootGui = Instance.new("ScreenGui")
rootGui.Name = "GazeRootGui"
rootGui.ResetOnSpawn = false
rootGui.Parent = CoreGui

local frame = Instance.new("Frame")
frame.Name = "GazeBro"
frame.Size = getScaledSize(0.33, 0.45)
frame.Position = UDim2.new(0.5, -getScaledSize(0.33,0).X.Offset/2, 0.5, -getScaledSize(0,0.45).Y.Offset/2)
frame.AnchorPoint = Vector2.new(0,0)
frame.BackgroundColor3 = Color3.fromRGB(35,35,35)
frame.BackgroundTransparency = 0
frame.BorderSizePixel = 0
frame.Parent = rootGui
frame.Active = true
frame.Draggable = true

-- rounded corners for whole menu
local frameCorner = Instance.new("UICorner", frame)
frameCorner.CornerRadius = UDim.new(0, 12)

-- border frame to show RGB animated border
local border = Instance.new("Frame")
border.Name = "RGBBorder"
border.Size = UDim2.new(1, 6, 1, 6) -- slightly larger to form border
border.Position = UDim2.new(0, -3, 0, -3)
border.BackgroundTransparency = 1
border.Parent = frame
border.ZIndex = frame.ZIndex - 1

local borderStroke = Instance.new("UIStroke", border) -- UIStroke used to draw border with smooth edges
borderStroke.LineJoinMode = Enum.LineJoinMode.Round
borderStroke.Thickness = 3
borderStroke.Transparency = 0
borderStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
borderStroke.Color = Color3.fromRGB(0,170,255)

local borderCorner = Instance.new("UICorner", border)
borderCorner.CornerRadius = UDim.new(0, 16)

-- Title header (PrimeVip) inside frame, above searchbar
local header = Instance.new("Frame")
header.Name = "Header"
header.Size = UDim2.new(1, 0, 0, 36)
header.Position = UDim2.new(0, 0, 0, 6)
header.BackgroundTransparency = 1
header.Parent = frame
header.ZIndex = frame.ZIndex + 1

local primeBadge = Instance.new("Frame")
primeBadge.Name = "PrimeBadge"
primeBadge.Size = UDim2.new(0, 150, 0, 28)
primeBadge.Position = UDim2.new(0, 12, 0, 4)
primeBadge.BackgroundTransparency = 0
primeBadge.BackgroundColor3 = Color3.fromRGB(20,20,20)
primeBadge.Parent = header
primeBadge.ZIndex = header.ZIndex + 1
primeBadge.ClipsDescendants = true

local primeCorner = Instance.new("UICorner", primeBadge)
primeCorner.CornerRadius = UDim.new(0, 8)

local primeLabel = Instance.new("TextLabel", primeBadge)
primeLabel.Size = UDim2.new(1, -6, 1, 0)
primeLabel.Position = UDim2.new(0, 6, 0, 0)
primeLabel.BackgroundTransparency = 1
primeLabel.Font = Enum.Font.GothamBold
primeLabel.Text = "PrimeVip"
primeLabel.TextScaled = true
primeLabel.TextColor3 = Color3.fromRGB(255, 215, 0)
primeLabel.ZIndex = primeBadge.ZIndex + 1

-- subtle glow using UIStroke around primeLabel
local primeGlow = Instance.new("UIStroke", primeBadge)
primeGlow.Thickness = 1
primeGlow.Transparency = 0.5
primeGlow.Color = primeLabel.TextColor3

-- Search bar (positioned below header so no overlap)
local searchBar = Instance.new("TextBox", frame)
searchBar.Name = "SearchBar"
searchBar.PlaceholderText = "Search..."
searchBar.Text = ""
searchBar.Font = Enum.Font.SourceSans
searchBar.TextScaled = true
searchBar.TextColor3 = Color3.fromRGB(200,200,200)
searchBar.ClearTextOnFocus = true
searchBar.BackgroundColor3 = Color3.fromRGB(30,30,30)
searchBar.BorderSizePixel = 0
searchBar.Size = UDim2.new(0.86, 0, 0, 34)
searchBar.Position = UDim2.new(0.07, 0, 0, 48) -- below header
searchBar.ZIndex = frame.ZIndex + 1
local searchCorner = Instance.new("UICorner", searchBar)
searchCorner.CornerRadius = UDim.new(0,8)

-- Main label 'GAZE' at top-left but below header
local gazeLabel = Instance.new("TextLabel", frame)
gazeLabel.Name = "GazeLabel"
gazeLabel.Text = "GAZE"
gazeLabel.Font = Enum.Font.GothamBold
gazeLabel.TextScaled = true
gazeLabel.TextColor3 = Color3.fromRGB(255,255,255)
gazeLabel.BackgroundTransparency = 1
gazeLabel.Size = UDim2.new(0.25,0,0,32)
gazeLabel.Position = UDim2.new(0.07,0,0,12)
gazeLabel.ZIndex = frame.ZIndex + 1

-- Scroll frame for buttons
local scrollFrame = Instance.new("ScrollingFrame", frame)
scrollFrame.Name = "ScrollFrame"
scrollFrame.Size = UDim2.new(0.86, 0, 0.72, 0)
scrollFrame.Position = UDim2.new(0.07, 0, 0, 96)
scrollFrame.BackgroundTransparency = 1
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 6
scrollFrame.CanvasSize = UDim2.new(0,0,0,0)
scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
local scrollCorner = Instance.new("UICorner", scrollFrame)
scrollCorner.CornerRadius = UDim.new(0,6)

-- small footer area for donate/emote buttons if needed
local footer = Instance.new("Frame", frame)
footer.Name = "Footer"
footer.Size = UDim2.new(1,0,0,42)
footer.Position = UDim2.new(0,0,1,-46)
footer.BackgroundTransparency = 1

-- Toggle button (separate ScreenGui so it can be dragged independent)
local toggleGui = Instance.new("ScreenGui")
toggleGui.Name = "PrimeToggleGui"
toggleGui.ResetOnSpawn = false
toggleGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
toggleGui.Parent = CoreGui

local toggleFrame = Instance.new("Frame", toggleGui)
toggleFrame.Name = "PrimeToggleFrame"
toggleFrame.Size = UDim2.new(0, 110, 0, 36)
toggleFrame.Position = UDim2.new(1, -130, 0, 12)
toggleFrame.BackgroundColor3 = Color3.fromRGB(28,28,28)
toggleFrame.BorderSizePixel = 0
toggleFrame.AnchorPoint = Vector2.new(0,0)
toggleFrame.Active = true
toggleFrame.Draggable = true

local toggleCorner = Instance.new("UICorner", toggleFrame)
toggleCorner.CornerRadius = UDim.new(0,10)

local toggleButton = Instance.new("TextButton", toggleFrame)
toggleButton.Size = UDim2.new(1, -8, 1, -6)
toggleButton.Position = UDim2.new(0, 4, 0, 3)
toggleButton.BackgroundColor3 = Color3.fromRGB(45,45,45)
toggleButton.BorderSizePixel = 0
toggleButton.Text = "Prime"
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextScaled = true
toggleButton.TextColor3 = Color3.fromRGB(255,255,255)
local toggleBtnCorner = Instance.new("UICorner", toggleButton)
toggleBtnCorner.CornerRadius = UDim.new(0,8)

toggleButton.MouseButton1Click:Connect(function()
    frame.Visible = not frame.Visible
    toggleButton.Text = frame.Visible and "Prime" or "Show"
end)

-- ===========================
-- Button factory + lists
-- ===========================
local buttons = {}
local function updateCanvasSize()
    local count = #buttons
    local totalHeight = count * 46
    scrollFrame.CanvasSize = UDim2.new(0,0,0, totalHeight)
end

local function createTheButton(text, callback)
    local button = Instance.new("TextButton")
    button.Text = tostring(text)
    button.Font = Enum.Font.SourceSansBold
    button.TextScaled = true
    button.TextColor3 = Color3.fromRGB(230,230,230)
    button.BackgroundColor3 = Color3.fromRGB(50,50,50)
    button.Size = UDim2.new(1, 0, 0, 40)
    button.Position = UDim2.new(0, 0, 0, #buttons * 46)
    button.AnchorPoint = Vector2.new(0,0)
    button.BackgroundTransparency = 0
    button.BorderSizePixel = 0
    button.Parent = scrollFrame
    local btnCorner = Instance.new("UICorner", button)
    btnCorner.CornerRadius = UDim.new(0,6)

    button.MouseButton1Click:Connect(function()
        pcall(callback)
    end)

    table.insert(buttons, button)
    updateCanvasSize()
end

-- createButton wrapper matches old signature (tab, text, animationType, animationId)
local function createButton(tab, text, animationType, animationId)
    createTheButton(text .. " - " .. tostring(animationType), function()
        pcall(function()
            setAnimation(animationType, animationId)
            Notify(animationType, text, 1)
        end)
    end)
end

-- ===========================
-- Animations table (kept from original, trimmed/kept)
-- ===========================
local Animations = {
    ["Idle"] = {
        ["2016 Animation (mm2)"] = {"387947158", "387947464"},
        ["Astronaut"] = {"891621366", "891633237"},
        ["Bold"] = {"16738333868", "16738334710"},
        ["Bubbly"] = {"910004836", "910009958"},
        ["Cartoony"] = {"742637544", "742638445"},
        ["Confident"] = {"1069977950", "1069987858"},
        ["R15 Reanimated"] = {"4211217646", "4211218409"},
        ["Robot"] = {"616088211", "616089559"},
        ["Zombie"] = {"616158929", "616160636"}
    },
    ["Walk"] = {
        ["Astronaut"] = "891667138",
        ["Cartoony"] = "742640026",
        ["Confident"] = "1070017263",
        ["Robot"] = "616095330",
    },
    ["Run"] = {
        ["2016 Animation (mm2)"] = "387947975",
        ["Cartoony"] = "10921076136",
        ["Robot"] = "10921250460",
    },
    ["Jump"] = {
        ["Astronaut"] = "891627522",
        ["Cartoony"] = "742637942",
        ["Robot"] = "616090535",
    },
    ["Fall"] = {
        ["Astronaut"] = "891617961",
        ["Bubbly"] = "910001910",
    },
    ["SwimIdle"] = {},
    ["Swim"] = {},
    ["Climb"] = {}
}

-- ===========================
-- Animation control helpers
-- ===========================
local lastAnimations = {}

local function StopAnim()
    local pl = Players.LocalPlayer
    if not pl then return end
    local ch = pl.Character
    if not ch then return end
    local Hum = ch:FindFirstChildOfClass("Humanoid") or ch:FindFirstChildOfClass("AnimationController")
    if Hum then
        for _, track in ipairs(Hum:GetPlayingAnimationTracks()) do
            track:Stop(0)
        end
    end
end

local function ResetIdle()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    local Hum = ch:FindFirstChildOfClass("Humanoid")
    if Hum and ch:FindFirstChild("Animate") then
        pcall(function()
            local Animate = ch.Animate
            Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id=0"
            Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetWalk()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") then
        pcall(function()
            ch.Animate.walk.WalkAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetRun()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") then
        pcall(function()
            ch.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetJump()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") then
        pcall(function()
            ch.Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetFall()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") then
        pcall(function()
            ch.Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetSwim()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") and ch.Animate:FindFirstChild("swim") then
        pcall(function()
            ch.Animate.swim.Swim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetSwimIdle()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") and ch.Animate:FindFirstChild("swimidle") then
        pcall(function()
            ch.Animate.swimidle.SwimIdle.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end
local function ResetClimb()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    if ch:FindFirstChild("Animate") and ch.Animate:FindFirstChild("climb") then
        pcall(function()
            ch.Animate.climb.ClimbAnim.AnimationId = "http://www.roblox.com/asset/?id=0"
        end)
    end
end

local function refresh()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    local h = ch:FindFirstChildOfClass("Humanoid")
    if h then
        pcall(function() h:ChangeState(Enum.HumanoidStateType.Freefall) end)
    end
end
local function refreshswim()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    local h = ch:FindFirstChildOfClass("Humanoid")
    if h then
        pcall(function()
            h:ChangeState(Enum.HumanoidStateType.GettingUp)
            task.wait(0.1)
            h:ChangeState(Enum.HumanoidStateType.Swimming)
        end)
    end
end
local function refreshclimb()
    local pl = Players.LocalPlayer
    local ch = pl.Character
    if not ch then return end
    local h = ch:FindFirstChildOfClass("Humanoid")
    if h then
        pcall(function()
            h:ChangeState(Enum.HumanoidStateType.GettingUp)
            task.wait(0.1)
            h:ChangeState(Enum.HumanoidStateType.Climbing)
        end)
    end
end

-- freeze/unfreeze safe wrapper
local function freeze()
    local p = cloneref(Players).LocalPlayer
    local char = p.Character or p.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = true
    end
    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") and not part.Anchored then
            pcall(function() part.Anchored = true end)
        end
    end
end
local function unfreeze()
    local p = cloneref(Players).LocalPlayer
    local char = p.Character or p.CharacterAdded:Wait()
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = false
    end
    for _, part in ipairs(char:GetDescendants()) do
        if part:IsA("BasePart") and part.Anchored then
            pcall(function() part.Anchored = false end)
        end
    end
end

-- setAnimation: apply via Animate module if present + attempt to play animation track
function setAnimation(animationType, animationId)
    -- save
    lastAnimations[animationType] = animationId
    -- apply
    local pl = Players.LocalPlayer
    local ch = pl.Character or pl.CharacterAdded:Wait()
    local Animate = ch:FindFirstChild("Animate")
    -- freeze briefly to avoid jitter when swapping many animations
    freeze()
    task.wait(0.08)
    pcall(function()
        if animationType == "Idle" then
            ResetIdle()
            if type(animationId) == "table" then
                if Animate and Animate:FindFirstChild("idle") then
                    Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId[1])
                    Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId[2])
                end
            else
                if Animate and Animate:FindFirstChild("idle") then
                    Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
                    Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
                end
            end
            refresh()
        elseif animationType == "Walk" then
            lastAnimations.Walk = animationId
            ResetWalk()
            if Animate and Animate:FindFirstChild("walk") then
                Animate.walk.WalkAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refresh()
        elseif animationType == "Run" then
            lastAnimations.Run = animationId
            ResetRun()
            if Animate and Animate:FindFirstChild("run") then
                Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refresh()
        elseif animationType == "Jump" then
            lastAnimations.Jump = animationId
            ResetJump()
            if Animate and Animate:FindFirstChild("jump") then
                Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refresh()
        elseif animationType == "Fall" then
            lastAnimations.Fall = animationId
            ResetFall()
            if Animate and Animate:FindFirstChild("fall") then
                Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refresh()
        elseif animationType == "Swim" then
            lastAnimations.Swim = animationId
            ResetSwim()
            if Animate and Animate:FindFirstChild("swim") then
                Animate.swim.Swim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refreshswim()
        elseif animationType == "SwimIdle" then
            lastAnimations.SwimIdle = animationId
            ResetSwimIdle()
            if Animate and Animate:FindFirstChild("swimidle") then
                Animate.swimidle.SwimIdle.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refreshswim()
        elseif animationType == "Climb" then
            lastAnimations.Climb = animationId
            ResetClimb()
            if Animate and Animate:FindFirstChild("climb") then
                Animate.climb.ClimbAnim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            refreshclimb()
        end
    end)
    task.wait(0.08)
    unfreeze()

    -- also attempt to play animation track for immediate feedback (humanoid)
    pcall(function()
        local hum = ch:FindFirstChildOfClass("Humanoid") or ch:FindFirstChildOfClass("AnimationController")
        if hum then
            for _, t in ipairs(hum:GetPlayingAnimationTracks()) do
                if t.Name == animationType then
                    t:Stop(0)
                end
            end
            local anim = Instance.new("Animation")
            if type(animationId) == "table" then
                anim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId[1])
            else
                anim.AnimationId = "http://www.roblox.com/asset/?id="..tostring(animationId)
            end
            local track = hum:LoadAnimation(anim)
            track.Name = animationType
            track:Play()
        end
    end)
    -- save file for restore
    pcall(function()
        if writefile then
            pcall(function() writefile("MeWhenUrMom.json", HttpService:JSONEncode(lastAnimations)) end)
        end
    end)
end

-- ===========================
-- Save / Load last animations
-- ===========================
local function loadLastAnimations()
    pcall(function()
        if isfile and isfile("MeWhenUrMom.json") then
            local data = readfile("MeWhenUrMom.json")
            local decoded = HttpService:JSONDecode(data)
            for k,v in pairs(decoded) do
                lastAnimations[k] = v
            end
            Notify("Saved Animations", "Loaded saved animations", 4)
        end
    end)
end
loadLastAnimations()

-- ===========================
-- Emote + Donate helpers
-- ===========================
local function PlayEmote(animationId)
    pcall(function()
        StopAnim()
        local pl = Players.LocalPlayer
        local ch = pl.Character or pl.CharacterAdded:Wait()
        local humanoid = ch:FindFirstChildOfClass("Humanoid")
        if humanoid then
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. tostring(animationId)
            local animationTrack = humanoid:LoadAnimation(animation)
            animationTrack:Play()
            Notify("Emote", "Playing "..tostring(animationId), 2)
        end
    end)
end

local function AddEmote(name, id)
    createTheButton("Emote: "..tostring(name), function() PlayEmote(id) end)
end

local function Buy(gamePassID)
    local MarketplaceService = game:GetService("MarketplaceService")
    local success, err = pcall(function()
        MarketplaceService:PromptGamePassPurchase(LocalPlayer, gamePassID)
    end)
    if not success then
        pcall(function() setclipboard("https://www.roblox.com/game-pass/" .. tostring(gamePassID)) end)
        Notify("Copied", "Gamepass Link to clipboard", 4)
    end
end

local function AddDonate(Price, Id)
    createTheButton("Donate "..tostring(Price).." Robux", function()
        Buy(Id)
    end)
end

-- ===========================
-- Populate UI with animation buttons
-- ===========================
for groupName, groupTable in pairs(Animations) do
    if type(groupTable) == "table" then
        for name, id in pairs(groupTable) do
            -- small yield to avoid blocking
            task.wait(0.01)
            createButton(nil, name, groupName, id)
        end
    end
end

-- add some control buttons at bottom
createTheButton("Reset All Idle", function()
    ResetIdle(); Notify("Reset", "Idle reset", 2)
end)
createTheButton("Stop All Animations", function()
    StopAnim(); Notify("Stopped", "All animation tracks stopped", 2)
end)

-- sample donate/emotes
AddDonate(20, 1131371530)
AddDonate(200, 1131065702)
AddEmote("Dance 1", 12521009666)
AddEmote("Wave", 12521004586)

-- ===========================
-- Search functionality
-- ===========================
searchBar:GetPropertyChangedSignal("Text"):Connect(function()
    local searchText = tostring(searchBar.Text):lower()
    local order = 0
    for i, but in ipairs(buttons) do
        local t = but.Text:lower()
        if searchText == "" or string.find(t, searchText, 1, true) then
            but.Visible = true
            but.Position = UDim2.new(0, 0, 0, order * 46)
            order = order + 1
        else
            but.Visible = false
        end
    end
    scrollFrame.CanvasSize = UDim2.new(0,0,0, order * 46)
end)

-- ===========================
-- RGB color cycle for border + prime label
-- ===========================
local hueSpeed = 1 / 1.8 -- full cycle per ~1.8s
local startTick = tick()
RunService.Heartbeat:Connect(function(dt)
    local t = (tick() - startTick) * hueSpeed
    local hue = t % 1 -- 0..1
    local color = Color3.fromHSV(hue, 0.85, 0.95)
    borderStroke.Color = color
    primeLabel.TextColor3 = Color3.fromHSV((hue + 0.05) % 1, 0.9, 1)
    primeGlow.Color = primeLabel.TextColor3
end)

-- ===========================
-- Final touches: show load notifications
-- ===========================
Notify("PLEASE", "Donate me, im poor :(", 3)
local lt = os.clock() - st
Notify("Loaded", string.format("in %.2f seconds.", lt), 4)
Notify("Changelog", "added '(UGC) Animations' + Prime header + RGB border", 8)

-- ===========================
-- Character added reapply saved animations
-- ===========================
Players.LocalPlayer.CharacterAdded:Connect(function(character)
    task.wait(0.2)
    for k,v in pairs(lastAnimations) do
        pcall(function() setAnimation(k, v) end)
    end
end)

end) -- pcall end
